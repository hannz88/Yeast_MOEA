// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sd_gsl
double sd_gsl(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_sd_gsl(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(sd_gsl(mx));
    return rcpp_result_gen;
END_RCPP
}
// one_if_zero
double one_if_zero(const double& x);
RcppExport SEXP _yeastfitness_one_if_zero(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(one_if_zero(x));
    return rcpp_result_gen;
END_RCPP
}
// sd_cpp
double sd_cpp(const NumericVector& x);
RcppExport SEXP _yeastfitness_sd_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sd_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// standardize_matrix_cpp
NumericMatrix standardize_matrix_cpp(const NumericMatrix& matx);
RcppExport SEXP _yeastfitness_standardize_matrix_cpp(SEXP matxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matx(matxSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize_matrix_cpp(matx));
    return rcpp_result_gen;
END_RCPP
}
// spearman_rho_cpp
double spearman_rho_cpp(const NumericMatrix& mx, int i, int j);
RcppExport SEXP _yeastfitness_spearman_rho_cpp(SEXP mxSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_rho_cpp(mx, i, j));
    return rcpp_result_gen;
END_RCPP
}
// pearson_correlation_cpp
double pearson_correlation_cpp(const NumericMatrix& mx, int i, int j);
RcppExport SEXP _yeastfitness_pearson_correlation_cpp(SEXP mxSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_correlation_cpp(mx, i, j));
    return rcpp_result_gen;
END_RCPP
}
// get_rho_cpp
double get_rho_cpp(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_get_rho_cpp(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rho_cpp(mx));
    return rcpp_result_gen;
END_RCPP
}
// get_sub_SCS_cpp
double get_sub_SCS_cpp(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_get_sub_SCS_cpp(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sub_SCS_cpp(mx));
    return rcpp_result_gen;
END_RCPP
}
// get_SCS_cpp
double get_SCS_cpp(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_get_SCS_cpp(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_SCS_cpp(mx));
    return rcpp_result_gen;
END_RCPP
}
// get_ASR_cpp
double get_ASR_cpp(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_get_ASR_cpp(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ASR_cpp(mx));
    return rcpp_result_gen;
END_RCPP
}
// get_VET_cpp
double get_VET_cpp(const NumericMatrix& matx);
RcppExport SEXP _yeastfitness_get_VET_cpp(SEXP matxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matx(matxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_VET_cpp(matx));
    return rcpp_result_gen;
END_RCPP
}
// get_vol_seridi
double get_vol_seridi(const NumericMatrix& matrix, const NumericMatrix& data_mt, double alpha, double beta);
RcppExport SEXP _yeastfitness_get_vol_seridi(SEXP matrixSEXP, SEXP data_mtSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_mt(data_mtSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_vol_seridi(matrix, data_mt, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// get_vol_pontes
double get_vol_pontes(const NumericMatrix& matrix, double genes_weight, double cond_weight);
RcppExport SEXP _yeastfitness_get_vol_pontes(SEXP matrixSEXP, SEXP genes_weightSEXP, SEXP cond_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< double >::type genes_weight(genes_weightSEXP);
    Rcpp::traits::input_parameter< double >::type cond_weight(cond_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(get_vol_pontes(matrix, genes_weight, cond_weight));
    return rcpp_result_gen;
END_RCPP
}
// print_test
String print_test();
RcppExport SEXP _yeastfitness_print_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(print_test());
    return rcpp_result_gen;
END_RCPP
}
// test_mean
double test_mean(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_test_mean(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_mean(mx));
    return rcpp_result_gen;
END_RCPP
}
// test_sd
double test_sd(const NumericMatrix& mx);
RcppExport SEXP _yeastfitness_test_sd(SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_sd(mx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_yeastfitness_sd_gsl", (DL_FUNC) &_yeastfitness_sd_gsl, 1},
    {"_yeastfitness_one_if_zero", (DL_FUNC) &_yeastfitness_one_if_zero, 1},
    {"_yeastfitness_sd_cpp", (DL_FUNC) &_yeastfitness_sd_cpp, 1},
    {"_yeastfitness_standardize_matrix_cpp", (DL_FUNC) &_yeastfitness_standardize_matrix_cpp, 1},
    {"_yeastfitness_spearman_rho_cpp", (DL_FUNC) &_yeastfitness_spearman_rho_cpp, 3},
    {"_yeastfitness_pearson_correlation_cpp", (DL_FUNC) &_yeastfitness_pearson_correlation_cpp, 3},
    {"_yeastfitness_get_rho_cpp", (DL_FUNC) &_yeastfitness_get_rho_cpp, 1},
    {"_yeastfitness_get_sub_SCS_cpp", (DL_FUNC) &_yeastfitness_get_sub_SCS_cpp, 1},
    {"_yeastfitness_get_SCS_cpp", (DL_FUNC) &_yeastfitness_get_SCS_cpp, 1},
    {"_yeastfitness_get_ASR_cpp", (DL_FUNC) &_yeastfitness_get_ASR_cpp, 1},
    {"_yeastfitness_get_VET_cpp", (DL_FUNC) &_yeastfitness_get_VET_cpp, 1},
    {"_yeastfitness_get_vol_seridi", (DL_FUNC) &_yeastfitness_get_vol_seridi, 4},
    {"_yeastfitness_get_vol_pontes", (DL_FUNC) &_yeastfitness_get_vol_pontes, 3},
    {"_yeastfitness_print_test", (DL_FUNC) &_yeastfitness_print_test, 0},
    {"_yeastfitness_test_mean", (DL_FUNC) &_yeastfitness_test_mean, 1},
    {"_yeastfitness_test_sd", (DL_FUNC) &_yeastfitness_test_sd, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_yeastfitness(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
